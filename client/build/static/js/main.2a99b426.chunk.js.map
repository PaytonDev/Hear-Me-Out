{"version":3,"sources":["useAuth.ts","components/PlayerWidget/PlayerWidget.tsx","API.ts","components/HomePage/AlbumSection/styles.tsx","components/HomePage/AlbumSection/AlbumSection.tsx","components/HomePage/ArtistSection/styles.tsx","components/HomePage/ArtistSection/ArtistSection.tsx","components/HomePage/SearchResults.tsx","components/HomePage/SearchBar/styles.tsx","components/HomePage/SearchBar/SearchBar.tsx","components/HomePage/HomeContainer.tsx","spotify.ts","components/LoginPage/LoginPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useAuth","code","useState","accessToken","setAccessToken","refreshToken","expiresIn","setExpiresIn","instance","axios","create","baseURL","useEffect","post","then","res","window","history","pushState","data","token","catch","err","console","log","interval","setInterval","response","location","href","clearInterval","PlayerWidget","props","Grid","container","className","alignItems","style","currentSong","display","item","xs","justifyContent","onClick","handlePauseSong","pauseButtonView","fontSize","handlePlaySong","playButtonView","nowPlaying","name","spotifyUrl","getSearchResults","query","a","modifiedQuery","replaceAll","get","headers","Authorization","results","getAlbumSongs","id","getArtist","Error","getArtistTopSongs","params","market","getArtistAlbums","getSong","muiGridContainer","makeStyles","root","backgroundColor","margin","padding","borderRadius","cssStyles","albumImageStyles","maxHeight","songUlStyles","marginBottom","borderTop","songLiStyles","borderBottom","songImageStyles","songNameStyles","marginLeft","width","songInfoStyles","textAlign","songInfoHeaderStyles","color","marginRight","verticalAlign","cursor","songNameHeaderStyles","albumTitleStyles","albumTitleArtistStyles","AlbumSection","albumSongs","setAlbumSongs","gridContainerClasses","currentAlbum","items","getCurrentAlbumSongs","goToArtist","artist","handleCurrentArtist","handleShowArtist","convertSongTime","milliseconds","min","Math","floor","sec","toString","toFixed","Box","src","images","url","alt","currentArtist","artists","map","song","idx","playSong","setNowPlaying","duration_ms","maxWidth","styles","containerHide","marginTop","overflow","containerShow","ArtistSection","artistAlbums","setArtistAlbums","artistTopSongs","setArtistTopSongs","seeAllOpen","setSeeAllOpen","classes","resAlbums","resSongs","tracks","getCurrentArtistMusic","spacing","slice","album","sm","md","lg","handleCurrentAlbum","handleShowAlbum","SearchResults","setCurrentAlbum","setCurrentArtist","albumVisible","setAlbumVisible","artistVisible","setArtistVisible","getArtistFromAlbum","selectedSong","songToPlay","Audio","preview_url","isPlaying","pause","makeAlbumVisible","makeArtistVisible","listArtists","Person","listAlbums","albums","Album","listSongs","songs","MusicNote","Fade","in","timeout","borderColor","SearchBar","setQuery","setAlbums","setArtists","setSongs","handleChange","FormControl","variant","TextField","label","onChange","e","target","value","InputProps","endAdornment","InputAdornment","position","spotifyApi","SpotifyWebApi","clientId","HomeContainer","setCurrentSong","setPauseButtonView","setPlayButtonView","undefined","play","Container","loginURL","join","LoginPage","App","URLSearchParams","search","exact","path","localStorage","setItem","getItem","storeCode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a99b426.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst useAuth = (code: string | null)=> {\r\n    const [accessToken, setAccessToken] = useState<string>();\r\n    const [refreshToken] = useState<string>();\r\n    const [expiresIn, setExpiresIn] = useState<number>();\r\n    const instance = axios.create({baseURL: \"http://localhost:4000\"})\r\n\r\n    useEffect(() => {\r\n        if (!code) return\r\n        instance.post('/login', {code})\r\n            .then((res) => {\r\n                window.history.pushState({}, '', \"/\");\r\n                setAccessToken(res.data.token);\r\n            })\r\n            .catch((err) => {\r\n                console.log('Not sure what this error is so I really hope you bring it up', err)\r\n            });\r\n    }, [code, instance])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!refreshToken || !expiresIn) return\r\n\r\n        let interval = setInterval(() => {\r\n            instance.post('/refresh', { refreshToken })\r\n            .then((response) => {\r\n                console.log(response.data)\r\n                setAccessToken(response.data.accessToken)\r\n                setExpiresIn(response.data.expiresIn)\r\n            })\r\n            .catch(() => {\r\n                window.location.href = \"/\"\r\n            });\r\n\r\n        }, (expiresIn - 120) * 1000);\r\n\r\n        return () => clearInterval(interval)\r\n\r\n    }, [refreshToken, expiresIn, instance])\r\n    return accessToken\r\n}\r\n\r\nexport default useAuth","import { Grid } from \"@material-ui/core\";\r\nimport PauseCircleOutline from \"@material-ui/icons/PauseCircleOutline\";\r\nimport PlayCircleOutline from \"@material-ui/icons/PlayCircleOutlineOutlined\";\r\nimport \"./PlayerWidget.css\"\r\n\r\ntype PlayerWidgetProps = {\r\n    currentSong: any\r\n    handlePlaySong: any\r\n    handlePauseSong: any\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n}\r\n\r\n\r\nconst PlayerWidget = (props: PlayerWidgetProps) => {\r\n\r\n    return (\r\n        <Grid container className=\"widget-container\" alignItems=\"center\" style={props.currentSong ? {display: \"flex\"} : {display: \"none\"}}>\r\n            <Grid container item xs={4} justifyContent=\"space-between\" alignItems=\"center\">\r\n\r\n                    <Grid item>\r\n                        <p>Now Playing</p>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <PauseCircleOutline\r\n                            onClick={() => props.handlePauseSong(props.currentSong)}\r\n                            style={props.pauseButtonView ? { fontSize: 40 } : { display : \"none\"}}\r\n                        /> \r\n                        <PlayCircleOutline \r\n                            onClick={() => props.handlePlaySong(props.currentSong)}\r\n                            style={props.playButtonView ? { fontSize: 40 } : { display : \"none\"}}\r\n                        /> \r\n                    </Grid> \r\n\r\n                    <Grid item>\r\n                        <p>{props.nowPlaying ? props.nowPlaying.name : null}</p>\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default PlayerWidget","import axios, { AxiosResponse } from \"axios\";\r\nconst spotifyUrl: string = \"https://api.spotify.com/v1/\" \r\n// Functions for Spotify API Calls\r\n\r\n\r\n\r\nexport const getSearchResults = async (query: string, token: string | undefined)=> {\r\n    const modifiedQuery: string = query.replaceAll(\" \", \"+\")\r\n\r\n        try {\r\n            const results: any = await axios.get(\r\n                spotifyUrl + `search?q=${modifiedQuery}&type=artist,album,track&limit=4`\r\n            , {headers: {Authorization: `Bearer ${token}`}})\r\n            return results\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n// These below are virtually the same function. Please refactor.\r\nexport const getAlbum = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `albums/${id}`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\n\r\nexport const getAlbumSongs = async (id: string, token: string | undefined) => {\r\n    try {\r\n        const results: any = await axios.get(\r\n            spotifyUrl + `albums/${id}/tracks`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n         console.log(err)\r\n    }\r\n}\r\n\r\n\r\nexport const getArtist = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `artists/${id}`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\nexport const getArtistTopSongs = async (id: string, token: string | undefined)=> {\r\n    try {\r\n        const results: any = await axios.get(\r\n            spotifyUrl + `artists/${id}/top-tracks`\r\n        , {headers: {Authorization: `Bearer ${token}`}, params: {market : 'from_token'}})\r\n        return results\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const getArtistAlbums = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `artists/${id}/albums`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\n\r\nexport const getSong = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `tracks/${id}`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\n","import { makeStyles } from \"@material-ui/styles\";\r\n\r\n\r\n// dark grey #1D1F22\r\n// orange\r\nconst muiGridContainer = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#1D1F22\",\r\n        margin: \"2em 0\",\r\n        padding:\"2em\",\r\n        borderRadius: 10,\r\n    }\r\n})\r\n\r\nconst cssStyles = {\r\n    albumImageStyles: {\r\n        maxHeight: 300\r\n    },\r\n    songUlStyles: {\r\n        marginBottom: 0,\r\n        padding: '1em 0',\r\n        borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n        \r\n\r\n    },\r\n    songLiStyles: {\r\n        borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n        padding: \".5em 0\"\r\n    },\r\n    songImageStyles: {\r\n        maxHeight: 40,\r\n    },\r\n    songNameStyles: {\r\n        display: 'inline',\r\n        marginLeft: 10,\r\n        width: \"30%\",\r\n    },\r\n    songInfoStyles: {\r\n        width: \"31%\",\r\n        textAlign: \"center\" as const,\r\n    },\r\n    songInfoHeaderStyles: {\r\n        width: \"30%\",\r\n        textAlign: \"center\" as const,\r\n        color: \"rgb(0, 0, 0)\",\r\n        marginRight: 10,\r\n        verticalAlign: \"top\",\r\n        ':hover': {\r\n            cursor: \"pointer\"\r\n        }\r\n    },\r\n    songNameHeaderStyles: {\r\n        width: \"30%\",\r\n        color: \"rgb(0, 0, 0)\",\r\n        marginRight: 45,\r\n        verticalAlign: \"top\",\r\n    },\r\n    albumTitleStyles: {\r\n        fontSize: 40,\r\n    },\r\n    albumTitleArtistStyles: {\r\n        fontSize: 32,\r\n    }\r\n\r\n}\r\n\r\nexport {muiGridContainer, cssStyles}","import { Box, Grid } from \"@material-ui/core\";\r\nimport { useState, useEffect, SetStateAction } from \"react\";\r\nimport { getAlbumSongs } from \"../../../API\";\r\nimport { muiGridContainer, cssStyles } from \"./styles\"\r\n\r\ntype AlbumSectionProps = {\r\n  currentAlbum: any\r\n  currentArtist: any\r\n  token: string | undefined\r\n  handleCurrentArtist: React.Dispatch<SetStateAction<any>>\r\n  handleShowArtist:  () => void\r\n  playSong: any\r\n  pauseButtonView: boolean\r\n  playButtonView: boolean\r\n  nowPlaying: Song | undefined\r\n  setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n}\r\n\r\n\r\nconst AlbumSection = (props: AlbumSectionProps) => {\r\n    const [albumSongs, setAlbumSongs] = useState<any>([])\r\n    const gridContainerClasses = muiGridContainer()\r\n\r\n   useEffect(() => {\r\n     async function getCurrentAlbumSongs() {\r\n       if (!props.currentAlbum) return\r\n       let res = await getAlbumSongs(props.currentAlbum.id, props.token)\r\n       setAlbumSongs(res.data.items)\r\n     }\r\n\r\n     getCurrentAlbumSongs()\r\n\r\n   },[props.currentAlbum, props.token])\r\n\r\n   const goToArtist = (artist: any) => {\r\n       if (props.currentAlbum) {\r\n           props.handleCurrentArtist(artist)\r\n           props.handleShowArtist()\r\n       }\r\n   }\r\n\r\n\r\n   const convertSongTime = (milliseconds: number) => {\r\n       let min = Math.floor( milliseconds / 60000);\r\n       let sec = ((milliseconds % 60000) / 1000);\r\n       return (\r\n           sec === 60 ? ( min + 1 ).toString() + \":00\" : min + \":\" + (sec < 10 ? \"0\" : \"\") + sec.toFixed(0)\r\n       )\r\n   }\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" justifyContent=\"center\" className={gridContainerClasses.root}>\r\n            <Grid item xs={4}>\r\n                <Box>\r\n                    <img\r\n                        style={cssStyles.albumImageStyles}\r\n                        src={props.currentAlbum ? props.currentAlbum.images[0].url : \"\"}\r\n                        alt={`${props.currentAlbum ? props.currentAlbum.name : ''} album cover`}\r\n                    />\r\n                </Box>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <Box>\r\n                    <p style={cssStyles.albumTitleStyles}>{props.currentAlbum ? props.currentAlbum.name : \"Album Name\"}</p>\r\n                    <p className=\"clickable\" onClick={() => goToArtist(props.currentArtist)}  style={cssStyles.albumTitleArtistStyles}>{props.currentAlbum ? `by ${props.currentAlbum.artists[0].name}` : \"Artist Name\"}</p>\r\n                </Box>\r\n            </Grid>\r\n            <Grid item xs={10} className=\"albumSection-songlist-grid\">\r\n                <Box >\r\n                    <ul style={cssStyles.songUlStyles}>\r\n                        <li >\r\n                            <Grid container item alignItems=\"flex-start\">\r\n                                <small style={cssStyles.songNameHeaderStyles }>Song</small>\r\n                                <small style={cssStyles.songInfoHeaderStyles}>Artist</small>\r\n                                <small style={cssStyles.songInfoHeaderStyles}>Time</small>\r\n                            </ Grid>\r\n                        </li>\r\n                        {props.currentAlbum ?\r\n                            albumSongs.map((song: any, idx: number) => (\r\n                            <li style={cssStyles.songLiStyles} key={idx}>\r\n                                    <Grid container item alignItems=\"center\">\r\n                                        <img\r\n                                            style={cssStyles.songImageStyles}\r\n                                            src={props.currentAlbum ? props.currentAlbum.images[2].url : \"\"}\r\n                                            alt={`${props.currentAlbum ? props.currentAlbum.name : ''} album cover`}\r\n                                        />\r\n                                        <div className=\"clickable\" onClick={() => {props.playSong(song.id); props.setNowPlaying(song)}} style={cssStyles.songNameStyles}>{song.name}</div>\r\n                                        <small className=\"clickable\" onClick={() => goToArtist(props.currentArtist)} style={cssStyles.songInfoStyles}>{song.artists[0].name}</small>\r\n                                        <small style={cssStyles.songInfoStyles}>{convertSongTime(song.duration_ms)}</small>\r\n                                    </Grid>\r\n                                </li>\r\n                            )): \"Album Songs\"}\r\n                    </ul>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n  export default AlbumSection","const cssStyles = {\r\n    songUlStyles: {\r\n        marginBottom: 0,\r\n        padding: '1em 0',\r\n        borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n    },\r\n    songLiStyles: {\r\n        borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n        padding: \".5em 0\"\r\n    },\r\n    songImageStyles: {\r\n        maxHeight: 40,\r\n        maxWidth: 40,\r\n    },\r\n    songNameStyles: {\r\n        display: 'inline',\r\n        marginLeft: 10,\r\n        width: \"70%\",\r\n    },\r\n    songInfoStyles: {\r\n        width: \"30%\",\r\n        textAlign: \"center\" as const,\r\n    },\r\n    songInfoHeaderStyles: {\r\n        width: \"30%\",\r\n        textAlign: \"center\" as const,\r\n        color: \"rgb(0, 0, 0)\",\r\n        marginRight: 10,\r\n        verticalAlign: \"top\",\r\n        ':hover': {\r\n            cursor: \"pointer\"\r\n        }\r\n    },\r\n}\r\n\r\nexport default cssStyles","import { Box, Grid } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getArtistAlbums, getArtistTopSongs } from \"../../../API\";\r\nimport  cssStyles from \"./styles\"\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\ntype ArtistSectionProps = {\r\n    currentArtist: any\r\n    currentAlbum: any\r\n    handleShowAlbum: () => void\r\n    handleCurrentAlbum: React.Dispatch<React.SetStateAction<undefined>>\r\n    playSong: any\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n \r\n}\r\n\r\n\r\n\r\nconst styles = makeStyles(() => ({\r\n    containerHide: {\r\n        marginTop: \"2em\",\r\n        backgroundColor: \"#1D1F22\",\r\n        borderRadius: 10,\r\n        maxHeight: 675,\r\n        padding: \"2em\",\r\n        overflow: \"hidden\",\r\n        marginBottom: 80,\r\n    },\r\n    containerShow: {\r\n        marginTop: \"2em\",\r\n        backgroundColor: \"#1D1F22\",\r\n        borderRadius: 10,\r\n        padding: \"2em\",\r\n        marginBottom: 80,\r\n    }\r\n}))\r\n\r\n\r\nconst ArtistSection = (props: ArtistSectionProps) => {\r\n    const [artistAlbums, setArtistAlbums] = useState<any>([])\r\n    const [artistTopSongs, setArtistTopSongs] = useState<any>([])\r\n    const [seeAllOpen, setSeeAllOpen] = useState(false)\r\n\r\n\r\n\r\n    const classes = styles(seeAllOpen)\r\n\r\n    useEffect(() => {\r\n      async function getCurrentArtistMusic() {\r\n        if (!props.currentArtist) return\r\n        let resAlbums = await getArtistAlbums(props.currentArtist.id, props.token)\r\n        let resSongs = await getArtistTopSongs(props.currentArtist.id, props.token)\r\n        setArtistAlbums(resAlbums.data.items)\r\n        setArtistTopSongs(resSongs.data.tracks)\r\n      }\r\n      getCurrentArtistMusic()\r\n    },[props.currentArtist, props.token])\r\n \r\n \r\n    const convertSongTime = (milliseconds: number) => {\r\n        let min = Math.floor( milliseconds / 60000);\r\n        let sec = ((milliseconds % 60000) / 1000);\r\n        return (\r\n            sec === 60 ? ( min + 1 ).toString() + \":00\" : min + \":\" + (sec < 10 ? \"0\" : \"\") + sec.toFixed(0)\r\n        )\r\n    }\r\n\r\n    const seeAllToggle = () => {\r\n        setSeeAllOpen(!seeAllOpen)\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} className={seeAllOpen ? classes.containerShow : classes.containerHide} alignItems={\"center\"}>\r\n\r\n            <Grid item xs={6} >\r\n                <img\r\n                    src={props.currentArtist ? props.currentArtist.images[0].url : \"Artist Image\"}\r\n                    alt={`${props.currentArtist ? props.currentArtist.name : ''} avatar`}\r\n                    style= {{maxHeight : 250, borderRadius: \"50%\"}}\r\n                />\r\n                    <p style={{fontSize: 54, marginTop: 10, marginBottom: 0}}>{props.currentArtist ? props.currentArtist.name : \"Artist Name\"}</p>\r\n            </Grid>\r\n\r\n\r\n            <Grid item container xs={6}>\r\n                <Grid item xs={12}>\r\n                    <header>Top Tracks</header>\r\n                    <ul>\r\n                    {props.currentArtist ?\r\n                            artistTopSongs.slice(0, 5).map((song: any, idx: number) => (\r\n                            <li style={cssStyles.songLiStyles} key={idx}>\r\n                                    <Grid container item alignItems=\"center\">\r\n                                        <Grid container alignItems=\"center\" item xs={6}>\r\n                                        <img\r\n                                            style={cssStyles.songImageStyles}\r\n                                            src={props.currentArtist ? song.album.images[2].url : \"\"}\r\n                                            alt={`${props.currentArtist ? song.album.name : ''} album cover`}\r\n                                        />\r\n                                        <div onClick={() => {props.playSong(song.id); props.setNowPlaying(song)}} style={cssStyles.songNameStyles}>{song.name}</div>\r\n                                        </Grid>\r\n                                        <Grid item xs={3} >\r\n                                            <div>\r\n                                                <small style={cssStyles.songInfoStyles}>{song.artists[0].name}</small>\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item container xs={3} justifyContent=\"center\">\r\n                                            <div>\r\n                                                <small style={cssStyles.songInfoStyles}>{convertSongTime(song.duration_ms)}</small>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </li>\r\n                            )): \"Album Songs\"}\r\n                    </ul>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container item  xs={12} spacing={4} justifyContent=\"center\">\r\n                <Grid container item xs={11} alignItems='center' justifyContent=\"space-between\">\r\n                    <p>Albums</p>\r\n                    <p onClick={seeAllToggle}>See All</p>\r\n                </Grid>\r\n                {props.currentArtist ? artistAlbums.map((album: any, idx: number) => (\r\n                    <Grid item sm={4} md={3} lg={2} key={idx}>\r\n                        <Box onClick={() => {props.handleCurrentAlbum(album); props.handleShowAlbum()}}>\r\n                            <img key={`${idx}-image`} src={album.images[1].url} alt={`${album.name} avatar`} style={{maxHeight : 150}}/>\r\n                            <div key={`${idx}-album`} >{album.name}</div>\r\n                        </Box>\r\n                    </Grid>\r\n                )): \"Album Songs\"}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ArtistSection;","import { Box, Grid, Fade } from \"@material-ui/core\";\r\nimport { Person, Album, MusicNote } from \"@material-ui/icons\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getArtist, getSong } from \"../../API\"\r\nimport AlbumSection from \"./AlbumSection/AlbumSection\";\r\nimport ArtistSection from \"./ArtistSection/ArtistSection\";\r\nimport \"./SearchResults.css\"\r\n\r\n\r\n\r\ntype SearchResultsProps = {\r\n    artists: Artist[]\r\n    albums: Album []\r\n    songs: Song []\r\n    currentSong: any\r\n    handlePlaySong: any\r\n    query: string\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n}\r\n\r\nexport default function SearchResults(props: SearchResultsProps) {\r\n    const [currentAlbum, setCurrentAlbum] = useState<any>()\r\n    const [currentArtist, setCurrentArtist] = useState<any>()\r\n    const [albumVisible, setAlbumVisible] = useState(false)\r\n    const [artistVisible, setArtistVisible] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!currentAlbum) return\r\n        async function getArtistFromAlbum () {\r\n            let artist =  await getArtist(currentAlbum.artists[0].id, props.token)\r\n            setCurrentArtist(artist.data)\r\n        }\r\n        getArtistFromAlbum()\r\n       \r\n    }, [props.token, currentAlbum])\r\n\r\n    const playSong = async (song: string) => {\r\n        let selectedSong = await getSong(song, props.token)\r\n        let songToPlay = {\r\n            song: new Audio(selectedSong.data.preview_url),\r\n            isPlaying : false\r\n        }\r\n        if (props.currentSong) {\r\n            props.currentSong.song.pause()\r\n        }\r\n        console.log(songToPlay)\r\n        props.handlePlaySong(songToPlay)\r\n    }\r\n\r\n    const makeAlbumVisible = () => {\r\n        setAlbumVisible(true)\r\n        setArtistVisible(false)\r\n    }\r\n\r\n    const makeArtistVisible = () => {\r\n        setAlbumVisible(false)\r\n        setArtistVisible(true)\r\n    }\r\n\r\n\r\n\r\n    const listArtists = props.artists.map((artist: any, idx: number) => \r\n    //  TODO: make onClick one function!!!!\r\n        <li className=\"searchResults-link\" key={idx} >\r\n            <Box className=\"searchResults-icon\">\r\n                <Person fontSize=\"small\" />\r\n            </Box>\r\n            <div className=\"clickable\" onClick={() => {makeArtistVisible(); setCurrentArtist(artist)}}>{artist.name}</div>\r\n        </li>\r\n    )\r\n    const listAlbums = props.albums.map((album: any, idx: number) => \r\n        <li className=\"searchResults-link\" key={idx}>\r\n            <Box className=\"searchResults-icon\">\r\n                <Album fontSize=\"small\" />\r\n            </Box>\r\n            <div className=\"clickable\" onClick={() => {makeAlbumVisible(); setCurrentAlbum(album);}}>{album.name}</div>\r\n        </li>\r\n    )\r\n    const listSongs = props.songs.map((song, idx) => \r\n        <li className=\"searchResults-link\" key={idx}>\r\n            <Box className=\"searchResults-icon\">\r\n                <MusicNote fontSize=\"small\" />\r\n            </Box>\r\n            <div className={\"clickable\"} onClick={() =>{playSong(song.id); props.setNowPlaying(song)}}>{song.name}</div>\r\n        </li>\r\n    )\r\n\r\n\r\n    return (\r\n        <Box>\r\n            <Fade in={props.query ? true : false} timeout={1000}>\r\n                <Box className=\"searchResults-box\">\r\n                    <Grid container justifyContent=\"space-between\" className=\"searchResults-grid-container\" style={ props.query ? {display : \"flex\"} : {display : \"none\"}}>\r\n                        <Grid item xs={4}>\r\n                            <Box className=\"searchResults-links-box\">\r\n                                <small>Artist</small>\r\n                                <ul>{listArtists}</ul>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid  item xs={4} >\r\n                            <Box className=\"searchResults-links-box\">\r\n                                <small>Albums</small>\r\n                                <ul>{listAlbums}</ul>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid  item xs={4}>\r\n                            <Box className=\"searchResults-links-box\">\r\n                                <small>Songs</small>\r\n                                <ul>{listSongs}</ul>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Fade>\r\n            <Box style={albumVisible ? {display : \"block\"} : {display : \"none\"}}>\r\n                <AlbumSection\r\n                    currentAlbum={currentAlbum}\r\n                    currentArtist={currentArtist}\r\n                    token={props.token}\r\n                    handleShowArtist={makeArtistVisible}\r\n                    handleCurrentArtist={setCurrentArtist}\r\n                    playSong={playSong}\r\n                    pauseButtonView={props.pauseButtonView}\r\n                    playButtonView={props.playButtonView}\r\n                    nowPlaying={props.nowPlaying}\r\n                    setNowPlaying={props.setNowPlaying}\r\n                />\r\n            </Box>\r\n            <Box style={artistVisible ? {display : \"block\"} : {display : \"none\"}}>\r\n                <ArtistSection\r\n                    currentArtist={currentArtist}\r\n                    currentAlbum={currentAlbum}\r\n                    handleShowAlbum={makeAlbumVisible}\r\n                    handleCurrentAlbum={setCurrentAlbum}\r\n                    token={props.token}\r\n                    playSong={playSong}\r\n                    pauseButtonView={props.pauseButtonView}\r\n                    playButtonView={props.playButtonView}\r\n                    nowPlaying={props.nowPlaying}\r\n                    setNowPlaying={props.setNowPlaying}\r\n                />\r\n            </Box>\r\n      \r\n    </Box>\r\n    )\r\n}","import { makeStyles } from \"@material-ui/styles\"\r\n\r\n\r\nconst styles = makeStyles({\r\n    root: {\r\n        marginTop: 10,\r\n        marginBottom: \"2em\",\r\n        color: \"#FCA511\",\r\n        width: 500,\r\n        \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n            color: \"#FCA511\",\r\n        },\r\n        \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-input\": {\r\n            color: \"#FCA511\"\r\n        },\r\n          \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"#FCA511\"\r\n        },\r\n\r\n    },\r\n\r\n})\r\n\r\nexport default styles\r\n\r\n","import InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Search from \"@material-ui/icons/Search\"\r\nimport SearchResults from \"../SearchResults\";\r\nimport styles from \"./styles\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getSearchResults } from \"../../../API\";\r\n\r\n\r\n\r\nexport type SearchBarProps = {\r\n    currentSong: HTMLAudioElement | undefined;\r\n    handlePlaySong: any\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n}\r\n\r\nexport default function SearchBar(props: SearchBarProps) {\r\n    const token = props.token\r\n    const classes = styles()\r\n\r\n    const [query, setQuery] = useState('')\r\n    const [albums, setAlbums] = useState([])\r\n    const [artists, setArtists] = useState([])\r\n    const [songs, setSongs] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!query) return\r\n        handleChange(query, props.token)\r\n\r\n    }, [query, props.token])\r\n\r\n\r\n    const handleChange = async (query: string, token: string | undefined) => {\r\n        if (query === '') {\r\n            return\r\n        }\r\n        const res = await getSearchResults(query, token)\r\n        setAlbums(res.data.albums.items)\r\n        setArtists(res.data.artists.items)\r\n        setSongs(res.data.tracks.items)\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <FormControl variant=\"outlined\" className=\"searchbar\">\r\n                <TextField\r\n                    id=\"searchbar\"\r\n                    label=\"What would you like to hear?\"\r\n                    variant=\"outlined\"\r\n                    className = {classes.root}\r\n                    onChange= { e => setQuery(e.target.value)}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <Search />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n            </FormControl>\r\n\r\n                <SearchResults\r\n                    artists={artists}\r\n                    albums={albums}\r\n                    songs={songs}\r\n                    currentSong={props.currentSong}\r\n                    query={query}\r\n                    handlePlaySong={props.handlePlaySong}\r\n                    token={token}\r\n                    pauseButtonView={props.pauseButtonView}\r\n                    playButtonView={props.playButtonView}\r\n                    nowPlaying={props.nowPlaying}\r\n                    setNowPlaying={props.setNowPlaying}\r\n                />\r\n        </>\r\n    )\r\n}","import { Container } from \"@material-ui/core/\"\r\nimport { useEffect, useState } from \"react\"\r\nimport useAuth from \"../../useAuth\";\r\nimport PlayerWidget from \"../PlayerWidget/PlayerWidget\";\r\nimport \"./HomeContainer.css\"\r\nimport SearchBar from \"./SearchBar/SearchBar\"\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\n\r\ninterface HomeContainerProps {\r\n    code: string | null\r\n}\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n    clientId: \"76007946b07a474487db86cb749ba027\"\r\n})\r\n\r\nconst HomeContainer = ({ code }: HomeContainerProps ) => {\r\n    const [currentSong, setCurrentSong] = useState<HTMLAudioElement>()\r\n    const [pauseButtonView, setPauseButtonView] = useState(false)\r\n    const [playButtonView, setPlayButtonView] = useState(true)\r\n    const [nowPlaying, setNowPlaying] = useState<Song>()\r\n\r\n    let token = useAuth(code)\r\n\r\n    useEffect(() => {\r\n        if (!token) return;\r\n        spotifyApi.setAccessToken(token)\r\n    }, [token])\r\n\r\n    const handlePlaySong = (song: any) => {\r\n        if (song === undefined) return\r\n        setCurrentSong(song)\r\n        song.song.play()\r\n        setPlayButtonView(!playButtonView)\r\n        setPauseButtonView(!pauseButtonView)\r\n    }\r\n\r\n    const handlePauseSong = (song: any) => {\r\n        if (song === undefined) return\r\n        song.song.pause()\r\n        setPauseButtonView(!pauseButtonView)\r\n        setPlayButtonView(!playButtonView)\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <Container >\r\n                <header className=\"home-hero\">\r\n                    Hear Me Out\r\n                </header>\r\n                <SearchBar\r\n                    currentSong={currentSong}\r\n                    handlePlaySong={handlePlaySong}\r\n                    pauseButtonView={pauseButtonView}\r\n                    playButtonView={playButtonView}\r\n                    token={token}\r\n                    nowPlaying={nowPlaying}\r\n                    setNowPlaying={setNowPlaying}\r\n                />\r\n            </Container>\r\n            <PlayerWidget\r\n                currentSong={currentSong}\r\n                handlePlaySong={handlePlaySong}\r\n                handlePauseSong={handlePauseSong} \r\n                token={token}\r\n                pauseButtonView={pauseButtonView}\r\n                playButtonView={playButtonView}\r\n                nowPlaying={nowPlaying}\r\n                setNowPlaying={setNowPlaying}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeContainer;","const authURL = 'https://accounts.spotify.com/authorize';\r\nconst redirectURi = 'https://hear-me-out-spotify-api.herokuapp.com/home'\r\nconst clientId = \"76007946b07a474487db86cb749ba027\"\r\n\r\nconst scopes = [\r\n    'streaming',\r\n    'user-read-email',\r\n    'user-read-private',\r\n];\r\n\r\nexport const loginURL = `${authURL}?client_id=${clientId}&response_type=code&redirect_uri=${redirectURi}&scope=${scopes.join(\r\n \"%20\"   \r\n)}`;","import { loginURL } from \"../../spotify\";\r\n\r\nconst LoginPage  = () => {\r\n    return (\r\n        <div>\r\n            <h1>This Is The Login Page</h1>\r\n            <a href={loginURL}>Login Here</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage","import HomeContainer from './components/HomePage/HomeContainer';\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\r\nimport './App.css';\r\nimport LoginPage from './components/LoginPage/LoginPage';\r\n\r\n\r\nfunction App() {\r\n  \r\n  const code = new URLSearchParams(window.location.search).get('code')\r\n\r\n  const storeCode = () => {\r\n      if (code) {\r\n      window.localStorage.setItem('yourCode', `${code}`)\r\n      let yourCode = localStorage.getItem('yourCode')\r\n      return yourCode\r\n    }\r\n    return\r\n  }\r\n  \r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            {storeCode() ? <HomeContainer code={code}/> : <LoginPage />}\r\n          </Route>\r\n          <Route path='/home'>\r\n          <HomeContainer code={code}/> \r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}