{"version":3,"sources":["state/action-types/index.ts","state/reducers/reducers.ts","state/reducers/index.ts","controller/useAuth.ts","components/PlayerWidget/PlayerWidget.tsx","controller/API.ts","components/Home/AlbumSection/styles.tsx","components/Home/AlbumSection/AlbumSection.tsx","components/Home/ArtistSection/styles.tsx","components/Home/ArtistSection/ArtistSection.tsx","components/Home/SearchResults.tsx","components/Home/SearchBar/styles.tsx","components/Home/SearchBar/SearchBar.tsx","components/Home/HomeContainer.tsx","controller/spotify.ts","components/Login/styles.tsx","components/Login/LoginPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","INITIAL_PLAYING_STATE","isPlaying","playingReducer","state","action","type","PLAY","PAUSE","reducers","combineReducers","playing","useAuth","code","useState","accessToken","setAccessToken","refreshToken","expiresIn","setExpiresIn","useEffect","axios","post","then","res","window","history","pushState","data","token","catch","err","console","log","interval","setInterval","response","location","href","clearInterval","PlayerWidget","props","Grid","container","className","alignItems","style","currentSong","display","item","xs","justifyContent","onClick","handlePauseSong","pauseButtonView","fontSize","handlePlaySong","playButtonView","nowPlaying","name","Button","variant","color","setOpenRecentlyPlayed","openRecentlyPlayed","spotifyUrl","getSearchResults","query","a","modifiedQuery","replaceAll","get","headers","Authorization","results","getAlbumSongs","id","getArtist","Error","getArtistTopSongs","params","market","getArtistAlbums","getSong","muiGridContainer","makeStyles","root","backgroundColor","margin","padding","borderRadius","cssStyles","albumImageStyles","maxHeight","songUlStyles","marginBottom","borderTop","songLiStyles","borderBottom","songImageStyles","songNameStyles","marginLeft","width","songInfoStyles","textAlign","songInfoHeaderStyles","marginRight","verticalAlign","cursor","songNameHeaderStyles","albumTitleStyles","albumTitleArtistStyles","AlbumSection","albumSongs","setAlbumSongs","gridContainerClasses","currentAlbum","items","getCurrentAlbumSongs","goToArtist","artist","handleCurrentArtist","handleShowArtist","convertSongTime","milliseconds","min","Math","floor","sec","toString","toFixed","Box","src","images","url","alt","currentArtist","artists","map","song","idx","playSong","setNowPlaying","duration_ms","maxWidth","styles","containerHide","marginTop","overflow","containerShow","ArtistSection","artistAlbums","setArtistAlbums","artistTopSongs","setArtistTopSongs","seeAllOpen","setSeeAllOpen","classes","resAlbums","resSongs","tracks","getCurrentArtistMusic","spacing","slice","album","sm","md","lg","handleCurrentAlbum","handleShowAlbum","SearchResults","setCurrentAlbum","setCurrentArtist","albumVisible","setAlbumVisible","artistVisible","setArtistVisible","getArtistFromAlbum","selectedSong","songToPlay","Audio","preview_url","pause","makeAlbumVisible","makeArtistVisible","listArtists","Person","listAlbums","albums","Album","listSongs","songs","MusicNote","Fade","in","timeout","border","borderColor","SearchBar","setQuery","setAlbums","setArtists","setSongs","handleChange","FormControl","TextField","label","onChange","e","target","value","InputProps","endAdornment","InputAdornment","position","spotifyApi","SpotifyWebApi","clientId","HomeContainer","setCurrentSong","setPauseButtonView","setPlayButtonView","undefined","play","Container","loginURL","join","loginHeader","StyledButton","withStyles","background","height","boxShadow","LoginPage","App","URLSearchParams","search","localStorage","setItem","getItem","storeCode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae2ed974.chunk.js","sourcesContent":["export enum ActionType {\r\n    PLAY = 'PLAY',\r\n    PAUSE = 'PAUSE'\r\n}","import { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\n\r\n\r\nconst INITIAL_PLAYING_STATE = {isPlaying : false};\r\n\r\nconst playingReducer = (state = INITIAL_PLAYING_STATE, action: Action) => {\r\n    switch (action.type) {\r\n        case ActionType.PLAY:\r\n            return {...state, isPlaying: !state.isPlaying }\r\n        case ActionType.PAUSE:\r\n            return {...state, isPlaying: !state.isPlaying }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default playingReducer","import { combineReducers } from \"redux\";\r\nimport playingReducer from \"./reducers\";\r\n\r\nconst reducers = combineReducers({\r\n    playing: playingReducer\r\n})\r\n\r\nexport default reducers","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst useAuth = (code: string | null) => {\r\n    const [accessToken, setAccessToken] = useState<string>();\r\n    const [refreshToken] = useState<string>();\r\n    const [expiresIn, setExpiresIn] = useState<number>();\r\n\r\n    useEffect(() => {\r\n        if (!code) return\r\n        axios.post('/login', {code})\r\n            .then((res) => {\r\n                window.history.pushState({}, '', \"/\");\r\n                setAccessToken(res.data.token);\r\n            })\r\n            .catch((err) => {\r\n                console.log( err)\r\n            });\r\n    }, [code])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!refreshToken || !expiresIn) return\r\n\r\n        let interval = setInterval(() => {\r\n            axios.post('/refresh', { refreshToken })\r\n            .then((response) => {\r\n                console.log(response.data)\r\n                setAccessToken(response.data.accessToken)\r\n                setExpiresIn(response.data.expiresIn)\r\n            })\r\n            .catch(() => {\r\n                window.location.href = \"/\"\r\n            });\r\n\r\n        }, (expiresIn - 120) * 1000);\r\n\r\n        return () => clearInterval(interval)\r\n\r\n    }, [refreshToken, expiresIn])\r\n    return accessToken\r\n}\r\n\r\nexport default useAuth","import { Grid, Button } from \"@material-ui/core\";\r\nimport PauseCircleOutline from \"@material-ui/icons/PauseCircleOutline\";\r\nimport PlayCircleOutline from \"@material-ui/icons/PlayCircleOutlineOutlined\";\r\nimport \"./PlayerWidget.css\"\r\n\r\ntype PlayerWidgetProps = {\r\n    currentSong: any\r\n    handlePlaySong: any\r\n    handlePauseSong: any\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n    openRecentlyPlayed: boolean\r\n    setOpenRecentlyPlayed: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\n\r\nconst PlayerWidget = (props: PlayerWidgetProps) => {\r\n    \r\n\r\n    return (\r\n        <Grid container className=\"widget-container\" alignItems=\"center\" style={props.currentSong ? {display: \"flex\"} : {display: \"none\"}}>\r\n            <Grid container item xs={3} justifyContent=\"space-between\" alignItems=\"center\">\r\n\r\n                    <Grid item>\r\n                        <p>Now Playing</p>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <PauseCircleOutline\r\n                            onClick={() => props.handlePauseSong(props.currentSong)}\r\n                            style={props.pauseButtonView ? { fontSize: 40 } : { display : \"none\"}}\r\n                        /> \r\n                        <PlayCircleOutline \r\n                            onClick={() => props.handlePlaySong(props.currentSong)}\r\n                            style={props.playButtonView ? { fontSize: 40 } : { display : \"none\"}}\r\n                        /> \r\n                    </Grid> \r\n\r\n                    <Grid item>\r\n                        <p>{props.nowPlaying ? props.nowPlaying.name : null}</p>\r\n                    </Grid>\r\n                    <Grid item> \r\n                        <Button variant='contained' color=\"primary\"  onClick={() => props.setOpenRecentlyPlayed(!props.openRecentlyPlayed)}>\r\n                            Recently Played\r\n                        </Button>\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default PlayerWidget","import axios, { AxiosResponse } from \"axios\";\r\nconst spotifyUrl: string = \"https://api.spotify.com/v1/\" \r\n\r\n\r\n// Functions for Spotify API Calls\r\n\r\nexport const getSearchResults = async (query: string, token: string | undefined)=> {\r\n    const modifiedQuery: string = query.replaceAll(\" \", \"+\")\r\n    console.log(token)\r\n        try {\r\n            const results: any = await axios.get(\r\n                spotifyUrl + `search?q=${modifiedQuery}&type=artist,album,track&limit=4`\r\n            , {headers: {Authorization: `Bearer ${token}`}})\r\n            return results\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n// These below are virtually the same function. Please refactor.\r\nexport const getAlbum = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `albums/${id}`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\n\r\nexport const getAlbumSongs = async (id: string, token: string | undefined) => {\r\n    try {\r\n        const results: any = await axios.get(\r\n            spotifyUrl + `albums/${id}/tracks`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n         console.log(err)\r\n    }\r\n}\r\n\r\n\r\nexport const getArtist = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `artists/${id}`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        console.log(results)\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\nexport const getArtistTopSongs = async (id: string, token: string | undefined)=> {\r\n    try {\r\n        const results: any = await axios.get(\r\n            spotifyUrl + `artists/${id}/top-tracks`\r\n        , {headers: {Authorization: `Bearer ${token}`}, params: {market : 'from_token'}})\r\n        return results\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const getArtistAlbums = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `artists/${id}/albums`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\n\r\nexport const getSong = async (id: string, token: string | undefined): Promise<AxiosResponse> => {\r\n    try {\r\n        const results: AxiosResponse = await axios.get(\r\n            spotifyUrl + `tracks/${id}`\r\n        , {headers: {Authorization: `Bearer ${token}`}})\r\n        return results\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\n","import { makeStyles } from \"@material-ui/styles\";\r\n\r\n\r\n// dark grey #1D1F22\r\n// orange\r\nconst muiGridContainer = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#1D1F22\",\r\n        margin: \"2em 0\",\r\n        padding:\"2em\",\r\n        borderRadius: 10,\r\n    }\r\n})\r\n\r\nconst cssStyles = {\r\n    albumImageStyles: {\r\n        maxHeight: 300\r\n    },\r\n    songUlStyles: {\r\n        marginBottom: 0,\r\n        padding: '1em 0',\r\n        borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n        \r\n\r\n    },\r\n    songLiStyles: {\r\n        borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n        padding: \".5em 0\"\r\n    },\r\n    songImageStyles: {\r\n        maxHeight: 40,\r\n    },\r\n    songNameStyles: {\r\n        display: 'inline',\r\n        marginLeft: 10,\r\n        width: \"30%\",\r\n    },\r\n    songInfoStyles: {\r\n        width: \"31%\",\r\n        textAlign: \"center\" as const,\r\n    },\r\n    songInfoHeaderStyles: {\r\n        width: \"30%\",\r\n        textAlign: \"center\" as const,\r\n        color: \"rgb(0, 0, 0)\",\r\n        marginRight: 10,\r\n        verticalAlign: \"top\",\r\n        ':hover': {\r\n            cursor: \"pointer\"\r\n        }\r\n    },\r\n    songNameHeaderStyles: {\r\n        width: \"30%\",\r\n        color: \"rgb(0, 0, 0)\",\r\n        marginRight: 45,\r\n        verticalAlign: \"top\",\r\n    },\r\n    albumTitleStyles: {\r\n        fontSize: 40,\r\n    },\r\n    albumTitleArtistStyles: {\r\n        fontSize: 32,\r\n    }\r\n\r\n}\r\n\r\nexport {muiGridContainer, cssStyles}","// General Desc: Section to display album songs after an Album selection is made from the Artist Section or Search Results.\r\n\r\n// User Interactions:\r\n//  - Artist Name is a Link.\r\n//  - A Song name is a link that plays the song.\r\n\r\n\r\nimport { Box, Grid } from \"@material-ui/core\";\r\nimport { useState, useEffect, SetStateAction } from \"react\";\r\nimport { getAlbumSongs } from \"../../../controller/API\";\r\nimport { muiGridContainer, cssStyles } from \"./styles\"\r\n\r\nexport type AlbumSectionProps = {\r\n  currentAlbum: any\r\n  currentArtist: any\r\n  token: string | undefined\r\n  handleCurrentArtist: React.Dispatch<SetStateAction<any>>\r\n  handleShowArtist:  () => void\r\n  playSong: any\r\n  pauseButtonView: boolean\r\n  playButtonView: boolean\r\n  nowPlaying: Song | undefined\r\n  setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n}\r\n\r\n\r\nconst AlbumSection = (props: AlbumSectionProps) => {\r\n    const [albumSongs, setAlbumSongs] = useState<any>([])\r\n    const gridContainerClasses = muiGridContainer()\r\n\r\n   useEffect(() => {\r\n     async function getCurrentAlbumSongs() {\r\n       if (!props.currentAlbum) return\r\n       let res = await getAlbumSongs(props.currentAlbum.id, props.token)\r\n       setAlbumSongs(res.data.items)\r\n     }\r\n     getCurrentAlbumSongs()\r\n   },[props.currentAlbum, props.token])\r\n\r\n\r\n   const goToArtist = (artist: any) => {\r\n       if (props.currentAlbum) {\r\n           props.handleCurrentArtist(artist)\r\n           props.handleShowArtist()\r\n       }\r\n   }\r\n\r\n\r\n   const convertSongTime = (milliseconds: number) => {\r\n       let min = Math.floor( milliseconds / 60000);\r\n       let sec = ((milliseconds % 60000) / 1000);\r\n       return (\r\n           sec === 60 ? ( min + 1 ).toString() + \":00\" : min + \":\" + (sec < 10 ? \"0\" : \"\") + sec.toFixed(0)\r\n       )\r\n   }\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" justifyContent=\"center\" className={gridContainerClasses.root}>\r\n            <Grid item xs={4}>\r\n                <Box>\r\n                    <img\r\n                        style={cssStyles.albumImageStyles}\r\n                        src={props.currentAlbum ? props.currentAlbum.images[0].url : \"\"}\r\n                        alt={`${props.currentAlbum ? props.currentAlbum.name : ''} album cover`}\r\n                    />\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n                <Box>\r\n                    <p style={cssStyles.albumTitleStyles}>\r\n                        {props.currentAlbum ? props.currentAlbum.name : \"Album Name\"}\r\n                    </p>\r\n\r\n                    {/* Artist Name Link */}\r\n                    <p className=\"clickable\"\r\n                        onClick={() => goToArtist(props.currentArtist)} \r\n                        style={cssStyles.albumTitleArtistStyles}>\r\n\r\n                        {props.currentAlbum ? `by ${props.currentAlbum.artists[0].name}` : \"Artist Name\"}\r\n\r\n                    </p>\r\n                </Box>\r\n\r\n            </Grid>\r\n            <Grid item xs={10} className=\"albumSection-songlist-grid\">\r\n                <Box >\r\n                    <ul style={cssStyles.songUlStyles}>\r\n                        <li >\r\n                            <Grid container item alignItems=\"flex-start\">\r\n                                <small style={cssStyles.songNameHeaderStyles }>Song</small>\r\n                                <small style={cssStyles.songInfoHeaderStyles}>Artist</small>\r\n                                <small style={cssStyles.songInfoHeaderStyles}>Time</small>\r\n                            </ Grid>\r\n                        </li>\r\n                        {props.currentAlbum ?\r\n                            albumSongs.map((song: any, idx: number) => (\r\n                            <li style={cssStyles.songLiStyles} key={idx}>\r\n                                    <Grid container item alignItems=\"center\">\r\n                                        <img\r\n                                            style={cssStyles.songImageStyles}\r\n                                            src={props.currentAlbum ? props.currentAlbum.images[2].url : \"\"}\r\n                                            alt={`${props.currentAlbum ? props.currentAlbum.name : ''} album cover`}\r\n                                        />\r\n                                        {/* Song Link */}\r\n                                        <div className=\"clickable\" onClick={() => {props.playSong(song.id); props.setNowPlaying(song)}} style={cssStyles.songNameStyles}>{song.name}</div>\r\n\r\n                                        {/* Artist Link */}\r\n                                        <small className=\"clickable\" onClick={() => goToArtist(props.currentArtist)} style={cssStyles.songInfoStyles}>{song.artists[0].name}</small>\r\n                                        <small style={cssStyles.songInfoStyles}>{convertSongTime(song.duration_ms)}</small>\r\n                                    </Grid>\r\n                                </li>\r\n                            )): \"Album Songs\"}\r\n                    </ul>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n  export default AlbumSection","const cssStyles = {\r\n    songUlStyles: {\r\n        marginBottom: 0,\r\n        padding: '1em 0',\r\n        borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n    },\r\n    songLiStyles: {\r\n        borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n        padding: \".5em 0\"\r\n    },\r\n    songImageStyles: {\r\n        maxHeight: 40,\r\n        maxWidth: 40,\r\n    },\r\n    songNameStyles: {\r\n        display: 'inline',\r\n        marginLeft: 10,\r\n        width: \"70%\",\r\n    },\r\n    songInfoStyles: {\r\n        width: \"30%\",\r\n        textAlign: \"center\" as const,\r\n    },\r\n    songInfoHeaderStyles: {\r\n        width: \"30%\",\r\n        textAlign: \"center\" as const,\r\n        color: \"rgb(0, 0, 0)\",\r\n        marginRight: 10,\r\n        verticalAlign: \"top\",\r\n        ':hover': {\r\n            cursor: \"pointer\"\r\n        }\r\n    },\r\n}\r\n\r\nexport default cssStyles","import { Box, Grid } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getArtistAlbums, getArtistTopSongs } from \"../../../controller/API\";\r\nimport  cssStyles from \"./styles\"\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\ntype ArtistSectionProps = {\r\n    currentArtist: any\r\n    currentAlbum: any\r\n    handleShowAlbum: () => void\r\n    handleCurrentAlbum: React.Dispatch<React.SetStateAction<undefined>>\r\n    playSong: any\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n \r\n}\r\n\r\n\r\n\r\nconst styles = makeStyles(() => ({\r\n    containerHide: {\r\n        marginTop: \"2em\",\r\n        backgroundColor: \"#1D1F22\",\r\n        borderRadius: 10,\r\n        maxHeight: 675,\r\n        padding: \"2em\",\r\n        overflow: \"hidden\",\r\n        marginBottom: 80,\r\n    },\r\n    containerShow: {\r\n        marginTop: \"2em\",\r\n        backgroundColor: \"#1D1F22\",\r\n        borderRadius: 10,\r\n        padding: \"2em\",\r\n        marginBottom: 80,\r\n    }\r\n}))\r\n\r\n\r\nconst ArtistSection = (props: ArtistSectionProps) => {\r\n    const [artistAlbums, setArtistAlbums] = useState<any>([])\r\n    const [artistTopSongs, setArtistTopSongs] = useState<any>([])\r\n    const [seeAllOpen, setSeeAllOpen] = useState(false)\r\n\r\n\r\n\r\n    const classes = styles(seeAllOpen)\r\n\r\n    useEffect(() => {\r\n      async function getCurrentArtistMusic() {\r\n        if (!props.currentArtist) return\r\n        let resAlbums = await getArtistAlbums(props.currentArtist.id, props.token)\r\n        let resSongs = await getArtistTopSongs(props.currentArtist.id, props.token)\r\n        setArtistAlbums(resAlbums.data.items)\r\n        setArtistTopSongs(resSongs.data.tracks)\r\n      }\r\n      getCurrentArtistMusic()\r\n    },[props.currentArtist, props.token])\r\n \r\n \r\n    const convertSongTime = (milliseconds: number) => {\r\n        let min = Math.floor( milliseconds / 60000);\r\n        let sec = ((milliseconds % 60000) / 1000);\r\n        return (\r\n            sec === 60 ? ( min + 1 ).toString() + \":00\" : min + \":\" + (sec < 10 ? \"0\" : \"\") + sec.toFixed(0)\r\n        )\r\n    }\r\n\r\n    const seeAllToggle = () => {\r\n        setSeeAllOpen(!seeAllOpen)\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} className={seeAllOpen ? classes.containerShow : classes.containerHide} alignItems={\"center\"}>\r\n\r\n            <Grid item xs={6} >\r\n                <img\r\n                    src={props.currentArtist ? props.currentArtist.images[0].url : \"Artist Image\"}\r\n                    alt={`${props.currentArtist ? props.currentArtist.name : ''} avatar`}\r\n                    style= {{maxHeight : 250, borderRadius: \"50%\"}}\r\n                />\r\n                    <p style={{fontSize: 54, marginTop: 10, marginBottom: 0}}>{props.currentArtist ? props.currentArtist.name : \"Artist Name\"}</p>\r\n            </Grid>\r\n\r\n\r\n            <Grid item container xs={6}>\r\n                <Grid item xs={12}>\r\n                    <header>Top Tracks</header>\r\n                    <ul>\r\n                    {props.currentArtist ?\r\n                            artistTopSongs.slice(0, 5).map((song: any, idx: number) => (\r\n                            <li style={cssStyles.songLiStyles} key={idx}>\r\n                                    <Grid container item alignItems=\"center\">\r\n                                        <Grid container alignItems=\"center\" item xs={6}>\r\n                                        <img\r\n                                            style={cssStyles.songImageStyles}\r\n                                            src={props.currentArtist ? song.album.images[2].url : \"\"}\r\n                                            alt={`${props.currentArtist ? song.album.name : ''} album cover`}\r\n                                        />\r\n                                        <div onClick={() => {props.playSong(song.id); props.setNowPlaying(song)}} style={cssStyles.songNameStyles}>{song.name}</div>\r\n                                        </Grid>\r\n                                        <Grid item xs={3} >\r\n                                            <div>\r\n                                                <small style={cssStyles.songInfoStyles}>{song.artists[0].name}</small>\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item container xs={3} justifyContent=\"center\">\r\n                                            <div>\r\n                                                <small style={cssStyles.songInfoStyles}>{convertSongTime(song.duration_ms)}</small>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </li>\r\n                            )): \"Album Songs\"}\r\n                    </ul>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container item  xs={12} spacing={4} justifyContent=\"center\">\r\n                <Grid container item xs={11} alignItems='center' justifyContent=\"space-between\">\r\n                    <p>Albums</p>\r\n                    <p onClick={seeAllToggle}>See All</p>\r\n                </Grid>\r\n                {props.currentArtist ? artistAlbums.map((album: any, idx: number) => (\r\n                    <Grid item sm={4} md={3} lg={2} key={idx}>\r\n                        <Box onClick={() => {props.handleCurrentAlbum(album); props.handleShowAlbum()}}>\r\n                            <img key={`${idx}-image`} src={album.images[1].url} alt={`${album.name} avatar`} style={{maxHeight : 150}}/>\r\n                            <div key={`${idx}-album`} >{album.name}</div>\r\n                        </Box>\r\n                    </Grid>\r\n                )): \"Album Songs\"}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ArtistSection;","import { Box, Grid, Fade } from \"@material-ui/core\";\r\nimport { Person, Album, MusicNote } from \"@material-ui/icons\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getArtist, getSong } from \"../../controller/API\"\r\nimport AlbumSection from \"./AlbumSection/AlbumSection\";\r\nimport ArtistSection from \"./ArtistSection/ArtistSection\";\r\nimport \"./SearchResults.css\"\r\n\r\n\r\n\r\ntype SearchResultsProps = {\r\n    artists: Artist[]\r\n    albums: Album []\r\n    songs: Song []\r\n    currentSong: any\r\n    handlePlaySong: any\r\n    query: string\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n}\r\n\r\nexport default function SearchResults(props: SearchResultsProps) {\r\n    const [currentAlbum, setCurrentAlbum] = useState<any>()\r\n    const [currentArtist, setCurrentArtist] = useState<any>()\r\n    const [albumVisible, setAlbumVisible] = useState(false)\r\n    const [artistVisible, setArtistVisible] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!currentAlbum) return\r\n        async function getArtistFromAlbum () {\r\n            let artist =  await getArtist(currentAlbum.artists[0].id, props.token)\r\n            setCurrentArtist(artist.data)\r\n        }\r\n        getArtistFromAlbum()\r\n       \r\n    }, [props.token, currentAlbum])\r\n\r\n    const playSong = async (song: string) => {\r\n        let selectedSong = await getSong(song, props.token)\r\n        let songToPlay = {\r\n            song: new Audio(selectedSong.data.preview_url),\r\n            isPlaying : false\r\n        }\r\n        if (props.currentSong) {\r\n            props.currentSong.song.pause()\r\n        }\r\n        console.log(songToPlay)\r\n        props.handlePlaySong(songToPlay)\r\n    }\r\n\r\n    const makeAlbumVisible = () => {\r\n        setAlbumVisible(true)\r\n        setArtistVisible(false)\r\n    }\r\n\r\n    const makeArtistVisible = () => {\r\n        setAlbumVisible(false)\r\n        setArtistVisible(true)\r\n    }\r\n\r\n\r\n\r\n    const listArtists = props.artists.map((artist: any, idx: number) => \r\n    //  TODO: make onClick one function!!!!\r\n        <li className=\"searchResults-link\" key={idx} >\r\n            <Box className=\"searchResults-icon\">\r\n                <Person fontSize=\"small\" />\r\n            </Box>\r\n            <div className=\"clickable\" onClick={() => {makeArtistVisible(); setCurrentArtist(artist); console.log(artist)}}>{artist.name}</div>\r\n        </li>\r\n    )\r\n    const listAlbums = props.albums.map((album: any, idx: number) => \r\n        <li className=\"searchResults-link\" key={idx}>\r\n            <Box className=\"searchResults-icon\">\r\n                <Album fontSize=\"small\" />\r\n            </Box>\r\n            <div className=\"clickable\" onClick={() => {makeAlbumVisible(); setCurrentAlbum(album);}}>{album.name}</div>\r\n        </li>\r\n    )\r\n    const listSongs = props.songs.map((song, idx) => \r\n        <li className=\"searchResults-link\" key={idx}>\r\n            <Box className=\"searchResults-icon\">\r\n                <MusicNote fontSize=\"small\" />\r\n            </Box>\r\n            <div className={\"clickable\"} onClick={() =>{playSong(song.id); props.setNowPlaying(song)}}>{song.name}</div>\r\n        </li>\r\n    )\r\n\r\n\r\n    return (\r\n        <Box>\r\n            <Fade in={props.query ? true : false} timeout={1000}>\r\n                <Box className=\"searchResults-box\">\r\n                    <Grid container justifyContent=\"space-between\" className=\"searchResults-grid-container\" style={ props.query ? {display : \"flex\"} : {display : \"none\"}}>\r\n                        <Grid item xs={4}>\r\n                            <Box className=\"searchResults-links-box\">\r\n                                <small>Artist</small>\r\n                                <ul>{listArtists}</ul>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid  item xs={4} >\r\n                            <Box className=\"searchResults-links-box\">\r\n                                <small>Albums</small>\r\n                                <ul>{listAlbums}</ul>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid  item xs={4}>\r\n                            <Box className=\"searchResults-links-box\">\r\n                                <small>Songs</small>\r\n                                <ul>{listSongs}</ul>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Fade>\r\n            <Box style={albumVisible ? {display : \"block\"} : {display : \"none\"}}>\r\n                <AlbumSection\r\n                    currentAlbum={currentAlbum}\r\n                    currentArtist={currentArtist}\r\n                    token={props.token}\r\n                    handleShowArtist={makeArtistVisible}\r\n                    handleCurrentArtist={setCurrentArtist}\r\n                    playSong={playSong}\r\n                    pauseButtonView={props.pauseButtonView}\r\n                    playButtonView={props.playButtonView}\r\n                    nowPlaying={props.nowPlaying}\r\n                    setNowPlaying={props.setNowPlaying}\r\n                />\r\n            </Box>\r\n            <Box style={artistVisible ? {display : \"block\"} : {display : \"none\"}}>\r\n                <ArtistSection\r\n                    currentArtist={currentArtist}\r\n                    currentAlbum={currentAlbum}\r\n                    handleShowAlbum={makeAlbumVisible}\r\n                    handleCurrentAlbum={setCurrentAlbum}\r\n                    token={props.token}\r\n                    playSong={playSong}\r\n                    pauseButtonView={props.pauseButtonView}\r\n                    playButtonView={props.playButtonView}\r\n                    nowPlaying={props.nowPlaying}\r\n                    setNowPlaying={props.setNowPlaying}\r\n                />\r\n            </Box>\r\n      \r\n    </Box>\r\n    )\r\n}","import { makeStyles } from \"@material-ui/styles\"\r\n\r\n\r\nconst styles = makeStyles({\r\n    root: {\r\n        marginTop: 10,\r\n        marginBottom: \"2em\",\r\n        border: \"#FCA511\",\r\n        color: \"#FCA511\",\r\n        width: 500,\r\n        \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n            color: \"#FCA511\",\r\n        },\r\n        \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-input\": {\r\n            color: \"#FCA511\"\r\n        },\r\n          \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"#FCA511\"\r\n        },\r\n\r\n    },\r\n\r\n})\r\n\r\nexport default styles\r\n\r\n","import InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Search from \"@material-ui/icons/Search\"\r\nimport SearchResults from \"../SearchResults\";\r\nimport styles from \"./styles\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getSearchResults } from \"../../../controller/API\";\r\n\r\n\r\n\r\nexport type SearchBarProps = {\r\n    currentSong: HTMLAudioElement | undefined;\r\n    handlePlaySong: any\r\n    token: string | undefined\r\n    pauseButtonView: boolean\r\n    playButtonView: boolean\r\n    nowPlaying: Song | undefined\r\n    setNowPlaying: React.Dispatch<React.SetStateAction<Song | undefined>>\r\n}\r\n\r\nexport default function SearchBar(props: SearchBarProps) {\r\n    const token = props.token\r\n    const classes = styles()\r\n\r\n    const [query, setQuery] = useState('')\r\n    const [albums, setAlbums] = useState([])\r\n    const [artists, setArtists] = useState([])\r\n    const [songs, setSongs] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!query) return\r\n        handleChange(query, props.token)\r\n\r\n    }, [query, props.token])\r\n\r\n\r\n    const handleChange = async (query: string, token: string | undefined) => {\r\n        if (query === '') {\r\n            return\r\n        }\r\n        const res = await getSearchResults(query, token)\r\n        console.log(token)\r\n        setAlbums(res.data.albums.items)\r\n        setArtists(res.data.artists.items)\r\n        setSongs(res.data.tracks.items)\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <FormControl variant=\"outlined\" className=\"searchbar\">\r\n                <TextField\r\n                    id=\"searchbar\"\r\n                    label=\"What would you like to hear?\"\r\n                    variant=\"outlined\"\r\n                    className = {classes.root}\r\n                    onChange= { e => setQuery(e.target.value)}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <Search />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n            </FormControl>\r\n\r\n                <SearchResults\r\n                    artists={artists}\r\n                    albums={albums}\r\n                    songs={songs}\r\n                    currentSong={props.currentSong}\r\n                    query={query}\r\n                    handlePlaySong={props.handlePlaySong}\r\n                    token={token}\r\n                    pauseButtonView={props.pauseButtonView}\r\n                    playButtonView={props.playButtonView}\r\n                    nowPlaying={props.nowPlaying}\r\n                    setNowPlaying={props.setNowPlaying}\r\n                />\r\n        </>\r\n    )\r\n}","import { Container } from \"@material-ui/core/\"\r\nimport { useEffect, useState } from \"react\"\r\nimport useAuth from \"../../controller/useAuth\";\r\nimport PlayerWidget from \"../PlayerWidget/PlayerWidget\";\r\nimport \"./HomeContainer.css\"\r\nimport SearchBar from \"./SearchBar/SearchBar\"\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\n\r\ninterface HomeContainerProps {\r\n    code: string | null\r\n}\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n    clientId: \"76007946b07a474487db86cb749ba027\"\r\n})\r\n\r\nconst HomeContainer = ({ code }: HomeContainerProps ) => {\r\n    const [currentSong, setCurrentSong] = useState<HTMLAudioElement>()\r\n    const [pauseButtonView, setPauseButtonView] = useState(false)\r\n    const [playButtonView, setPlayButtonView] = useState(true)\r\n    const [nowPlaying, setNowPlaying] = useState<Song>()\r\n    const [openRecentlyPlayed, setOpenRecentlyPlayed] = useState(false)\r\n\r\n    let token = useAuth(code)\r\n    useEffect(() => {\r\n        if (!token) return;\r\n        spotifyApi.setAccessToken(token)\r\n    }, [token])\r\n\r\n    const handlePlaySong = (song: any) => {\r\n        if (song === undefined) return\r\n        setCurrentSong(song)\r\n        song.song.play()\r\n        setPlayButtonView(!playButtonView)\r\n        setPauseButtonView(!pauseButtonView)\r\n    }\r\n\r\n    const handlePauseSong = (song: any) => {\r\n        if (song === undefined) return\r\n        song.song.pause()\r\n        setPauseButtonView(!pauseButtonView)\r\n        setPlayButtonView(!playButtonView)\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <Container >\r\n                <header className=\"home-hero\">\r\n                    Hear Me Out\r\n                </header>\r\n                <SearchBar\r\n                    currentSong={currentSong}\r\n                    handlePlaySong={handlePlaySong}\r\n                    pauseButtonView={pauseButtonView}\r\n                    playButtonView={playButtonView}\r\n                    token={token}\r\n                    nowPlaying={nowPlaying}\r\n                    setNowPlaying={setNowPlaying}\r\n                />\r\n            </Container>\r\n            <PlayerWidget\r\n                currentSong={currentSong}\r\n                handlePlaySong={handlePlaySong}\r\n                handlePauseSong={handlePauseSong} \r\n                token={token}\r\n                pauseButtonView={pauseButtonView}\r\n                playButtonView={playButtonView}\r\n                nowPlaying={nowPlaying}\r\n                setNowPlaying={setNowPlaying}\r\n                openRecentlyPlayed={openRecentlyPlayed}\r\n                setOpenRecentlyPlayed={setOpenRecentlyPlayed}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeContainer;","const authURL = 'https://accounts.spotify.com/authorize';\r\nconst redirectURi = 'http://localhost:4000/home'\r\nconst clientId = '76007946b07a474487db86cb749ba027'\r\n\r\n\r\n\r\nconst scopes = [\r\n    'streaming',\r\n    'user-read-email',\r\n    'user-read-private',\r\n];\r\n\r\nexport const loginURL = `${authURL}?client_id=${clientId}&response_type=code&redirect_uri=${redirectURi}&scope=${scopes.join(\r\n \"%20\"   \r\n)}`;","import { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst styles = makeStyles({\r\n    loginHeader : {\r\n        fontSize: 72,\r\n\r\n    }\r\n})\r\n\r\nexport default styles\r\n\r\n","import { loginURL } from \"../../controller/spotify\";\r\nimport { Grid, Button, Box } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\"\r\nimport styles from \"./styles\";\r\n\r\nconst StyledButton = withStyles({\r\n    root: {\r\n        background: \"rgb(252, 165, 17)\",\r\n        borderRadius: 10,\r\n        border: 2,\r\n        color: \"#1d1f22\",\r\n        height: 60,\r\n        padding: '0 25px',\r\n        boxShadow: `0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n        0 6.7px 5.3px rgba(0, 0, 0, 0.048),`\r\n       \r\n    }\r\n})(Button)\r\n\r\n\r\nconst LoginPage  = () => {\r\n    const classes = styles()\r\n    return (\r\n        <Grid>\r\n            <Box className={classes.loginHeader}>Welcome To <br/> Hear Me Out</Box>\r\n            <p>This app uses Spotify so please Login Below.</p>\r\n            <StyledButton href={loginURL}>Login with Spotify</StyledButton>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default LoginPage","import HomeContainer from './components/Home/HomeContainer';\r\nimport './App.css';\r\nimport LoginPage from './components/Login/LoginPage';\r\n\r\n\r\nfunction App() {\r\n  \r\n  const code = new URLSearchParams(window.location.search).get('code')\r\n\r\n  const storeCode = () => {\r\n      if (code) {\r\n      window.localStorage.setItem('yourCode', `${code}`)\r\n      let yourCode = localStorage.getItem('yourCode')\r\n      return yourCode\r\n    }\r\n    return\r\n  }\r\n  \r\n\r\n  return (\r\n    \r\n      <div className=\"App\">\r\n          {storeCode() ? <HomeContainer code={code}/> : <LoginPage />}  \r\n      </div>\r\n \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reducers from './state/reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(reducers)\n\nReactDOM.render(\n  \n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}